library(tidyverse)
library(dplyr)
library(reshape)
library(stargazer)
data <- read.csv("data_from_NLSY.csv")
final_dictionary <- read_csv("final_dictionary.csv")

clean_data <- data %>% 
  tidyr::pivot_longer(
    -c(R0000100, R0214700, R0214800, R0010300, R0000700, R1214800, R1395100),
    names_to = "variable_id",
    values_to = "value",
    values_drop_na = TRUE
  ) %>% 
  dplyr::left_join(
    final_dictionary
  ) %>% 
  dplyr::filter(value >= 0) %>% 
  dplyr::rename(
    id = R0000100,
    ethnicity = R0214700,
    gender = R0214800,
    religion = R0010300,
    country_of_birth = R0000700,
    citizen_of_us = R1214800,
    drug_use_marijuana_or_hashish_lifetime = R1395100
  ) %>% 
  dplyr::select(-variable_id)


variables <- clean_data %>% 
  dplyr::filter(is.na(job_number)) %>% 
  dplyr::select(id, year, variable, value) %>% 
  tidyr::pivot_wider(
    names_from = variable,
    values_from = value
  )

clean_data_fix <- clean_data %>% 
  dplyr::filter(!is.na(job_number)) %>% 
  dplyr::left_join(variables)

data_to_mutate <- clean_data_fix %>% 
  tidyr::pivot_wider(
    names_from = variable,
    values_from = value
  ) %>% dplyr::select(-c(16))

#mutate variables according to their categorical values

mutated_data <- data_to_mutate %>% 
  dplyr::mutate(
    payrate = log(payrate),
    hourly_pay = log(hourly_pay),
    hourly_rate_of_pay = log(hourly_rate_of_pay),
    total_tenure_inweeks_with_employer_asof_interview_date = total_tenure_inweeks_with_employer_asof_interview_date / 52
  ) %>%
  dplyr::mutate(job_satisfaction = coalesce(job_satisfaction, global_job_satisfaction)) %>% 
  dplyr::select(-global_job_satisfaction) %>% 
  dplyr::mutate(hourly_pay = coalesce(hourly_pay, hourly_rate_of_pay)) %>% 
  dplyr::select(-payrate, -hourly_rate_of_pay) %>% 
  dplyr::mutate(
    gender = as_factor(
    ifelse(gender == 1, "male", "female")
  ), 
  ethnicity = as_factor(dplyr::case_when(
  ethnicity == 1 ~ "hispanic",
  ethnicity == 2 ~ "black",
  ethnicity == 3 ~ "non-hispanic non-black"
)),
religion = as_factor(dplyr::case_when(
  religion == 0 ~ "no_religion",
  religion %in% c(1, 2, 3, 4, 5, 6) ~"christian",
  religion == 7 ~ "catholic",
  religion == 8 ~ "jewish",
  religion == 9 ~ "other"
)),
country_of_birth = as_factor(ifelse(country_of_birth == 1, "us", "other" )),
marital_status = as_factor(
  dplyr::case_when(
    marital_status == 0 ~ "never married",
    marital_status == 1 ~ "married",
    marital_status == 2 ~ "separated",
    marital_status == 3 ~ "divorced",
    marital_status == 5 ~ "remarried",
    marital_status == 6 ~ "widowed"
  )),
family_poverty_previous_year = as_factor(ifelse(family_poverty_previous_year == 1,"in poverty", "not in poverty" )),
covered_union_or_employee_contract = as_factor(ifelse(covered_union_or_employee_contract == 1, "covered", "not covered")),
union_or_employee_association = as_factor(ifelse(union_or_employee_association == 1, "in union", "not in union")),
job_with_state_local_or_federal_government = as_factor(
  dplyr::case_when(
    job_with_state_local_or_federal_government == 1 ~ "federal",
    job_with_state_local_or_federal_government == 2 ~ "state",
    job_with_state_local_or_federal_government == 3 ~ "local"
  )),
new_job_lined_up_before_left = as_factor(ifelse(
  new_job_lined_up_before_left == 1, "yes", "no")),
reason_left = as_factor(
  dplyr::case_when(
    reason_left == 1 ~ "layoff",
    reason_left == 2 ~ "fired",
    reason_left == 3 ~ "programme ended",
    reason_left == 4 ~ "better job",
    reason_left == 5 ~ "quit",
    reason_left == 6 ~ "little money",
    reason_left == 7 ~ "illness"
  )),
class_of_worker = as_factor(
  dplyr::case_when(
  class_of_worker == 1 ~ "private company",
  class_of_worker == 2 ~ "government",
  class_of_worker == 3 ~ "self-employed",
  class_of_worker == 4 ~ "without work")),
citizen_of_us = as_factor(ifelse(
  citizen_of_us == 1, "yes", "no")),
drug_use_marijuana_or_hashish_lifetime = as_factor(
  dplyr::case_when(
    drug_use_marijuana_or_hashish_lifetime == 0 ~ "never used",
    drug_use_marijuana_or_hashish_lifetime == 1 ~ "1-9 occasions",
    drug_use_marijuana_or_hashish_lifetime == 2 ~ "10-39 occasions",
    drug_use_marijuana_or_hashish_lifetime == 3 ~ "40-99 occasions",
    drug_use_marijuana_or_hashish_lifetime == 4 ~ "100-999 occasions",
    drug_use_marijuana_or_hashish_lifetime == 5 ~ "1000+ occasions")))

#rename features
names(mutated_data)[names(mutated_data)=="job_with_state_local_or_federal_government"] <- "job_government"
names(mutated_data)[names(mutated_data)=="age_at_interview_date"] <- "age"
names(mutated_data)[names(mutated_data)=="total_family_income_past_year"] <- "total_family_income"
names(mutated_data)[names(mutated_data)=="family_poverty_previous_year"] <- "family_poverty"
names(mutated_data)[names(mutated_data)=="hourly_pay"] <- "pay"
names(mutated_data)[names(mutated_data)=="height_in_feet"] <- "height"
names(mutated_data)[names(mutated_data)=="citizen_of_us"] <- "us_citizen"
names(mutated_data)[names(mutated_data)=="children_household"] <- "children"
names(mutated_data)[names(mutated_data)=="control_own_life"] <- "control_life"
names(mutated_data)[names(mutated_data)=="importance_of_planning"] <- "importance_planning"
names(mutated_data)[names(mutated_data)=="importance_of_luck"] <- "importance_luck"
names(mutated_data)[names(mutated_data)=="degree_of_control_over_direction_own_life"] <- "control_life"
names(mutated_data)[names(mutated_data)=="country_of_birth"] <- "born_in_us"
names(mutated_data)[names(mutated_data)=="drug_use_marijuana_or_hashish_lifetime"] <- "drug_use"
names(mutated_data)[names(mutated_data)=="degree_of_influence_own_life"] <- "influence_life"
names(mutated_data)[names(mutated_data)=="status_of_number_of_jobs_ever_reported"] <- "jobs_reported"
names(mutated_data)[names(mutated_data)=="covered_union_or_employee_contract"] <- "union_or_contract"
names(mutated_data)[names(mutated_data)=="total_tenure_inweeks_with_employer_asof_interview_date"] <- "tenure"
names(mutated_data)[names(mutated_data)=="new_job_lined_up_before_left"] <- "new_job_before_left"
names(mutated_data)[names(mutated_data)=="ces_depression"] <- "depression"
names(mutated_data)[names(mutated_data)=="union_or_employee_association"] <- "union_or_association"

#drop values
mutated_data <- mutated_data %>% 
  dplyr::select(-hours_per_week,
                -height_in_inches)

#check missing observations
colSums(is.na(mutated_data))

#drop missing values
job_satisfaction_data <- mutated_data %>% 
  dplyr::filter(!is.na(job_satisfaction))

#taking care of missing variables in three steps
#Step 1 imputing numerical missing data with means
library(zoo)

imputing_data <- job_satisfaction_data %>% 
  group_by(id) %>% 
  dplyr::mutate(total_family_income = ifelse(is.na(total_family_income), 
                                           mean(total_family_income, na.rm = T), 
                                           total_family_income)) %>% 
  dplyr::mutate(self_esteem_score = na.approx(self_esteem_score, na.rm=FALSE)) %>% 
  dplyr::mutate(self_esteem_score = ifelse(is.na(self_esteem_score), 
                                         mean(self_esteem_score, na.rm = T), 
                                         self_esteem_score)) %>% 
  dplyr::mutate(rotter_score = na.approx(rotter_score, na.rm=FALSE)) %>% 
  dplyr::mutate(rotter_score = ifelse(is.na(rotter_score), 
                                      mean(rotter_score, na.rm = T), 
                                      rotter_score)) %>% 
  dplyr::mutate(hours_worked_week = ifelse(is.na(hours_worked_week), 
                                           mean(hours_worked_week, na.rm = T), 
                                           hours_worked_week)) %>% 
  dplyr::mutate(age = ifelse(is.na(age), 
                                 mean(age, na.rm = T), 
                                 age)) %>% 
  dplyr::mutate(children = ifelse(is.na(children), 
                                               mean(children, na.rm = T), 
                                            children)) %>% 
  dplyr::mutate(jobs_since_last_interview = ifelse(is.na(jobs_since_last_interview), 
                                            mean(jobs_since_last_interview, na.rm = T), 
                                            jobs_since_last_interview)) %>% 
  dplyr::mutate(weight = ifelse(is.na(weight), 
                         mean(weight, na.rm = T), 
                         weight)) %>% 
  dplyr::mutate(height = ifelse(is.na(height), 
                                 mean(height, na.rm = T), 
                                 height)) %>%
  dplyr::mutate(life_satisfaction = ifelse(is.na(life_satisfaction), 
                                        mean(life_satisfaction, na.rm = T), 
                                        life_satisfaction)) %>%
dplyr::mutate(pay = ifelse(is.na(pay), 
                                          mean(pay, na.rm = T), 
                                          pay)) %>% 
dplyr::mutate(tenure = ifelse(is.na(tenure), 
                                   mean(tenure, na.rm = T), 
                                   tenure)) %>%
  dplyr::mutate(born_in_us = ifelse(is.na(born_in_us), 
                                        mean(born_in_us, na.rm = T), 
                                    born_in_us)) %>% 
  dplyr::mutate(importance_planning = ifelse(is.na(importance_planning),
                                                mean(importance_planning, na.rm = T),
                                                importance_planning)) %>% 
  dplyr::mutate(jobs_reported = ifelse(is.na(jobs_reported),
                                                mean(jobs_reported, na.rm = T),
                                       jobs_reported)) %>% 
  dplyr::mutate(importance_luck = ifelse(is.na(importance_luck),
                                            mean(importance_luck, na.rm = T),
                                            importance_luck)) %>% 
  dplyr::mutate(influence_life = ifelse(is.na(influence_life),
                                            mean(influence_life, na.rm = T),
                                        influence_life)) %>%
  dplyr::mutate(control_life = ifelse(is.na(control_life),
                                                      mean(control_life, na.rm = T),
                                      control_life)) %>%
  dplyr::mutate(depression = ifelse(is.na(depression),
                              mean(depression, na.rm = T),
                              depression)) %>% 
  dplyr::select(-union_or_association, 
                -family_poverty, 
                -union_or_contract, 
                -new_job_before_left, 
                -marital_status, 
                -drug_use, 
                -class_of_worker, 
                -reason_left, 
                -job_government) %>% 
  ungroup()




#imputing missing variables for categorical value with mice

require(mice)
set.seed(123)
data_binary <- job_satisfaction_data %>% dplyr::select(id, union_or_association, family_poverty, union_or_contract, new_job_before_left)
imputed_binary <- mice(data_binary, method = "logreg")
data_binary <- mice::complete(imputed_binary)

data_categorical <- job_satisfaction_data %>% dplyr::select(id, 
                                                            marital_status, 
                                                            drug_use, 
                                                            class_of_worker, 
                                                            reason_left, 
                                                            job_government)
imputed_categorical <- mice(data_categorical, method = "polyreg")
data_categorical <- mice::complete(imputed_categorical)

mice_imputed <- cbind(data_binary, data_categorical)
mice_imputed <- subset(mice_imputed) %>% 
                dplyr::select(union_or_association,
                              family_poverty,
                              union_or_contract,
                              new_job_before_left,
                              marital_status,
                              drug_use,
                              class_of_worker,
                              reason_left,
                              job_government)

#binding both numerically imputed values and categorically imputed values into single dataframe                     
                      
imputed_data_final <- cbind(imputing_data, mice_imputed)

#check how many NAs are missing per column

colSums(is.na(imputed_data_final))

#Step 3 impute NA for the above numerical values using Hmisc to create a dataset containing more imputed observation

install.packages("Hmisc")
library(Hmisc)

imputed_data_final_Hmisc <- aregImpute(~ life_satisfaction + 
                                         height + 
                                         depression + 
                                         self_esteem_score +
                                         rotter_score + 
                                         influence_life +
                                         importance_luck +
                                         importance_planning +
                                         control_life,
                                       data = job_satisfaction_data, 
                                       n.impute = 5, 
                                       nk = 0)

imputed <-impute.transcan(imputed_data_final_Hmisc, 
                          data=job_satisfaction_data, 
                          imputation=5, 
                          list.out=TRUE, 
                          pr=FALSE, 
                          check=FALSE)

hmisc_imputed <- as.data.frame(do.call(cbind,imputed))

#binding both the dataset imputed with Hmisc and the dataset without Hmisc for evaluation

imputing_data_hmisc <- imputing_data %>% 
                      dplyr::select(-life_satisfaction, 
                                      -height,
                                      -depression, 
                                      -self_esteem_score,
                                      -rotter_score,
                                      -influence_life,
                                      -importance_luck,
                                      -importance_planning,
                                      -control_life)


prepped_data_full <- cbind(imputing_data_hmisc, 
                           mice_imputed, 
                           hmisc_imputed)

prepped_data_partial <- cbind(imputing_data, 
                              mice_imputed)

#drop all missing values
prepped_data_full <- drop_na(prepped_data_full)
prepped_data_partial <- drop_na(prepped_data_partial)
prepped_data_partial_center <- drop_na(prepped_data_partial_center)

#drop all infinite values
is.na(prepped_data_partial) <- sapply(prepped_data_partial, is.infinite)
prepped_data_partial <- drop_na(prepped_data_partial)
is.na(prepped_data_full) <- sapply(prepped_data_full, is.infinite)
prepped_data_full <- drop_na(prepped_data_full)
is.na(prepped_data_partial_center) <- sapply(prepped_data_partial_center, is.infinite)
prepped_data_partial_center <- drop_na(prepped_data_partial_center)
#center data 

prepped_data_subset <- prepped_data_partial %>% 
  subset()%>% 
  dplyr::select(control_life, 
         importance_planning,
         importance_luck,
         influence_life,
         rotter_score,
         total_family_income,
         self_esteem_score,
         depression,
         life_satisfaction,
         hours_worked_week,
         pay,
         tenure,
  ) %>% 
  scale(center = TRUE, scale = FALSE)  %>% 
  as.data.frame()

prepped_data_subset2 <- prepped_data_partial %>% 
  subset() %>% 
  dplyr::select(-control_life, 
                -importance_planning,
                -importance_luck,
                -influence_life,
                -rotter_score,
                -total_family_income,
                -self_esteem_score,
                -depression,
                -life_satisfaction,
                -hours_worked_week,
                -pay,
                -tenure)

prepped_data_partial_center <- cbind(prepped_data_subset, prepped_data_subset2)


#save data
save(prepped_data_full, file = "prepped_data_full_final.RData")
save(prepped_data_partial, file = "prepped_data_partial_final.RData")
save(prepped_data_partial_center, file = "prepped_data_partial_center_final.RData")


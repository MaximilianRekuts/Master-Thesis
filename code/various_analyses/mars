library(earth)
library(caret)
library(vip)
library(pdp)

# Fit a basic MARS model
mars1 <- earth(
  job_satisfaction ~ .,  
  data = prepped_data_partial_center   
)

# Print model summary
print(mars1)

summary(mars1) %>% .$coefficients %>% head(10)

plot(mars1, which = 1)

# Fit a basic MARS model
mars2 <- earth(
  job_satisfaction ~ .,  
  data = prepped_data_partial_center,
  degree = 2
)

# check out the first 10 coefficient terms
summary(mars2) %>% .$coefficients %>% head(10)

# create a tuning grid
hyper_grid <- expand.grid(
  degree = 1:3, 
  nprune = seq(2, 100, length.out = 10) %>% floor()
)

head(hyper_grid)

# Cross-validated model
set.seed(123)
cv_mars <- train(
  x = subset(prepped_data_partial_center, select = -job_satisfaction),
  y = prepped_data_partial_center$job_satisfaction,
  method = "earth",
  metric = "RMSE",
  trControl = trainControl(method = "cv", number = 10),
  tuneGrid = hyper_grid
)

# View results
cv_mars$bestTune
#   nprune degree
#24     34      3

cv_mars$results %>%
  filter(nprune == cv_mars$bestTune$nprune, degree == cv_mars$bestTune$degree)
##  degree nprune      RMSE  Rsquared       MAE      RMSESD
#1      3     34 0.7163093 0.0449651 0.5803071 0.003290429


ggplot(cv_mars)

cv_mars$resample

# variable importance plots
p1 <- vip(cv_mars, num_features = 40, geom = "point", value = "gcv") + ggtitle("GCV")
p2 <- vip(cv_mars, num_features = 40, geom = "point", value = "rss") + ggtitle("RSS")

gridExtra::grid.arrange(p1, p2, ncol = 2)

# extract coefficients, convert to tidy data frame, and
# filter for interaction terms

cv_mars$finalModel %>%
  coef() %>%  
  tidy() %>%  
  filter(stringr::str_detect(names, "\\*")) 

# Construct partial dependence plots
pp1 <- partial(cv_mars, pred.var = "life_satisfaction", grid.resolution = 10) %>% 
  autoplot()
pp2 <- partial(cv_mars, pred.var = "job_number", grid.resolution = 10) %>% 
  autoplot()
pp3 <- partial(cv_mars, pred.var = c("life_satisfaction", "job_number"), 
              grid.resolution = 10) %>% 
  plotPartial(levelplot = FALSE, zlab = "yhat", drape = TRUE, colorkey = TRUE, 
              screen = list(z = -20, x = -60))

# Display plots side by side
gridExtra::grid.arrange(pp1, pp2, pp3, ncol = 3)
